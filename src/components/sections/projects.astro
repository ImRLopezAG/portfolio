---
import { Button } from '@/components/ui/button';
import SectionTitle from './section-title.astro';
import Section from './section.astro';
import ProjectCard from '@components/project-card.astro';
import { projects } from '@shared/cv';
---

<Section id='projects'>
  <SectionTitle
    title='Featured Projects'
    desc='A selection of my recent work and personal projects.'
  />
  <div
      class='grid auto-rows-fr grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3'
    >
      {
        projects
        .filter((project) => project.img)
        .map((project, index) => (
          <div
            class:list={[
              'transition-all duration-500 hover:z-10',
              index % 5 === 0 && 'sm:col-span-2 sm:row-span-1',
              index % 7 === 0 && 'lg:col-span-2 lg:row-span-1',
              index % 3 === 0 && 'md:col-span-2 md:row-span-1',
            ]}
          >
            <ProjectCard project={project} />
          </div>
        ))
      }
    </div>

  <div class='text-center'>
    <Button asChild variant='outline'>
      <a href='/projects'>View All Projects</a>
    </Button>
  </div>
</Section>
<script>
  const MATRIX =
    'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789@#$%^&*()*&^%+-/~{[|`]}';

  const FONT_SIZE = 10;
  const $allCanvas = document.querySelectorAll(
    '[data-project-card] canvas'
  ) as NodeListOf<HTMLCanvasElement>;

  for (let i = 0; i < $allCanvas.length; i++) {
    const $canvas = $allCanvas[i];
    const $canvasCTX = $canvas.getContext('2d');

    $canvas.height = window.innerHeight;
    $canvas.width = window.innerWidth;

    const columns = $canvas.width / FONT_SIZE;
    const drops: number[] = [];

    for (let x = 0; x < columns; x++) drops[x] = 1;

    function draw() {
      if (!$canvasCTX) return;
      $canvasCTX.fillStyle = 'rgba(0, 0, 0, 0.04)';
      $canvasCTX.fillRect(0, 0, $canvas.width, $canvas.height);
      $canvasCTX.fillStyle = '#22b455';
      $canvasCTX.font = FONT_SIZE + 'px arial';
      for (let j = 0; j < drops.length; j++) {
        const text = MATRIX[Math.floor(Math.random() * MATRIX.length)];
        $canvasCTX.fillText(text, j * FONT_SIZE, drops[j] * FONT_SIZE);

        if (drops[j] * FONT_SIZE > $canvas.height && Math.random() > 0.975)
          drops[j] = 0;

        drops[j]++;
      }

      requestAnimationFrame(draw);
    }

    requestAnimationFrame(draw);
  }
</script>
